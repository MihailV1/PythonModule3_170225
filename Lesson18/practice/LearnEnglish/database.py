import random
import sqlite3
from pathlib import Path
from helpers.connection import Connect

DATABASE_NAME = 'vocabulary.db'


def init_db(db_path: Path = Path(DATABASE_NAME)):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É words, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç."""
    sql_words = """
    CREATE TABLE IF NOT EXISTS words (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    english_word TEXT NOT NULL UNIQUE,
    russian_translation TEXT NOT NULL
    );"""

    sql_answers = """CREATE TABLE IF NOT EXISTS answers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    word_id INTEGER NOT NULL,
    timestamp TEXT NOT NULL,
    test_type TEXT NOT NULL CHECK (test_type IN ('en_ru', 'ru_en')),
    is_correct INTEGER NOT NULL CHECK (is_correct IN (0, 1)),  
    FOREIGN KEY (word_id) REFERENCES words(id) ON DELETE CASCADE
    );
    """
    try:
        with Connect(db_path) as cursor:
            cursor.execute(sql_words)
            cursor.execute(sql_answers)
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")
    except sqlite3.Error as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")


def add_word(english_word: str, russian_translation: str, db_path: Path = Path(DATABASE_NAME)) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥."""
    sql_insert = """INSERT INTO words (english_word, russian_translation) VALUES (?, ?)"""
    if english_word == "" or russian_translation == "":
        raise ValueError("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
    try:
        with Connect(db_path) as cursor:
            cursor.execute(sql_insert, (english_word.lower().strip(), russian_translation.lower().strip()))
        print("üÜï‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å.")
    except sqlite3.Error as e:
        print(f"–î—ñ–¥—å–∫–æ!!! –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise ValueError

def log_answer(word_id: int, timestamp: str, test_type: str, is_correct: int, db_path: Path = Path(DATABASE_NAME))-> None:
    sql_insert_log = """INSERT INTO answers (word_id, timestamp, test_type, is_correct) VALUES (?, ?, ?, ?)"""
    try:
        with Connect(db_path) as cursor:
            cursor.execute(sql_insert_log, (word_id, timestamp, test_type, is_correct))
        # print(f"Log –¥–æ–±–∞–≤–ª–µ–Ω. word_id={word_id} timestamp={timestamp} test_type={test_type} is_correct={is_correct}")
    except sqlite3.Error as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å log_answer –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise ValueError

def view_overall_stats(db_path: Path = Path(DATABASE_NAME))->list:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É –≤ —Å–ª–æ–≤–∞—Ä–µ:
    –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤–µ—Ä–Ω—ã–µ/–Ω–µ–≤–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –ø—Ä–æ—Ü–µ–Ω—Ç –≤–µ—Ä–Ω—ã—Ö.
    """
    sql = """
    SELECT
        w.english_word,
        w.russian_translation,
        COUNT(a.id) AS total,
        SUM(CASE WHEN a.is_correct = 1 THEN 1 ELSE 0 END) AS correct,
        SUM(CASE WHEN a.is_correct = 0 THEN 1 ELSE 0 END) AS incorrect,
        CASE 
            WHEN COUNT(a.id) > 0 THEN
                ROUND(100.0 * SUM(CASE WHEN a.is_correct = 1 THEN 1 ELSE 0 END) / COUNT(a.id), 2)
            ELSE NULL
        END AS accuracy
    FROM words w
    LEFT JOIN answers a ON w.id = a.word_id
    GROUP BY w.id
    ORDER BY w.english_word;
    """
    try:
        with Connect(db_path) as cursor:
            cursor.execute(sql)
            rows = cursor.fetchall()
            return rows
    except sqlite3.Error as e:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")


def view_problem_words(limit: int =5, min_attempts: int = 1, db_path: Path = Path(DATABASE_NAME))-> list[tuple[str, str, int, int, int, float]]:
    """Args:
        limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ (—Ç–æ–ø N).
        min_attempts (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –≤—ã–±–æ—Ä–∫—É.
    """
    sql_problematic = """
    SELECT
        w.english_word,
        w.russian_translation,
        COUNT(a.id) AS total_attempts,
        SUM(CASE WHEN a.is_correct = 0 THEN 1 ELSE 0 END) AS wrong_answers,
        SUM(CASE WHEN a.is_correct = 1 THEN 1 ELSE 0 END) AS correct_answers,
        ROUND(100.0 * SUM(CASE WHEN a.is_correct = 1 THEN 1 ELSE 0 END) / COUNT(a.id), 2) AS accuracy
    FROM words w
    JOIN answers a ON w.id = a.word_id
    GROUP BY w.id
    HAVING total_attempts >= ?
    ORDER BY accuracy ASC
    LIMIT ?;
    """
    try:
        with Connect(db_path) as cursor:
            cursor.execute(sql_problematic, (min_attempts, limit))
            return cursor.fetchall()
    except sqlite3.Error as e:
        raise sqlite3.Error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞: {e}")

def view_words(db_path: Path = Path(DATABASE_NAME)) -> list:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ."""
    sql_select = "SELECT english_word, russian_translation FROM words"
    try:
        with Connect(db_path) as cursor:
            cursor.execute(sql_select)
            rows = cursor.fetchall()
            return rows
    except sqlite3.Error as e:
        raise sqlite3.Error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


def get_words(db_path: Path = Path(DATABASE_NAME)) -> list:
    sql = "SELECT id, english_word, russian_translation FROM words"
    try:
        with Connect(db_path) as cursor:
            cursor.execute(sql)
            rows = cursor.fetchall()
        if not rows:
            print("‚ùó –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞, –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞.")
            return []
        return rows #all_words
    except sqlite3.Error as e:
        raise sqlite3.Error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def delete_word(english_word: str, db_path: Path = Path(DATABASE_NAME)) -> int:
    """–£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —Å–ª–æ–≤—É."""
    sql_delete = """DELETE FROM words WHERE english_word = ?"""
    try:
        with Connect(db_path) as cursor:
            cursor.execute(sql_delete, (english_word,))
            return cursor.rowcount
    except sqlite3.Error as e:
        raise sqlite3.Error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


def get_all_tables(db_path: Path = Path(DATABASE_NAME)):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –ë–î (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)."""
    with Connect(db_path) as cursor:
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    return [row[0] for row in cursor.fetchall()]


def get_table_info(db_path: Path = Path(DATABASE_NAME), table_name: str=""):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)."""
    with Connect(db_path) as cursor:
        cursor.execute(f"PRAGMA table_info({table_name})")
    return cursor.fetchall()
