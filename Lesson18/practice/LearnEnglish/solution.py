import sqlite3
import random
from datetime import datetime

import database
from helpers.connection import Connect
from pathlib import Path

PATH_TO_DB = Path('vocabulary.db')

def choose_test_type()->str:
    print("  üß† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:")
    print("       1Ô∏è‚É£ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚û°Ô∏è –†—É—Å—Å–∫–∏–π (en_ru)")
    print("       2Ô∏è‚É£ –†—É—Å—Å–∫–∏–π ‚û°Ô∏è –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (ru_en)")
    while True:
        choice = input("–í–≤–µ–¥–∏—Ç–µ 1Ô∏è‚É£ / 2Ô∏è‚É£: ").strip()
        if choice == '1':
            return 'en_ru'
        elif choice == '2':
            return 'ru_en'
        else:
            print("       ‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

def show_words(PATH_TO_DB):
    rows = database.view_words(PATH_TO_DB)
    if rows:
        print(f"üóÇÔ∏è    {'–°–ª–æ–≤–æ':<13} |   {'–ü–µ—Ä–µ–≤–æ–¥':<13} |")
        for index, row in enumerate(rows):
            print(f" \033[31m{index +1}\033[0m    \033[94m{row[0]:<13}\033[0m |   \033[93m{row[1]:<13}\033[0m |")
    else:
        print("‚ùó –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.")
    input("\033[90m<-press Enter->\033[0m")

def start_test(PATH_TO_DB):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    all_words = database.get_words(PATH_TO_DB)
    if not all_words:
        return

    flag = True
    correct_answers_session = 0
    total_questions = 0
    test_type = choose_test_type()

    if test_type == 'en_ru':
        # –î–ª—è en_ru: –≤–æ–ø—Ä–æ—Å –ø–æ english_word, –æ–∂–∏–¥–∞–µ–º russian_translation
        get_question_word = lambda word_data: word_data[1]  # english_word
        get_expected_answer = lambda word_data: word_data[2]  # russian_translation
        exit_test = "exit"
        print(f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å EN –Ω–∞ RU")
    else:# ru_en
        # –î–ª—è ru_en: –≤–æ–ø—Ä–æ—Å –ø–æ russian_translation, –æ–∂–∏–¥–∞–µ–º english_word
        get_question_word = lambda word_data: word_data[2]  # russian_translation
        get_expected_answer = lambda word_data: word_data[1]  # english_word
        exit_test = "—Å—Ç–æ–ø"
        print(f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å RU –Ω–∞ EN")
    while flag:
        new_all_words = random.sample(all_words, len(all_words))
        for word_id, english_word, russian_translation in new_all_words:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
            question_word = get_question_word((word_id, english_word, russian_translation))
            # print(f"question_word={question_word}")
            expected_answer = get_expected_answer((word_id, english_word, russian_translation))
            # print(f"expected_answer={expected_answer}")
            print(f"üß† –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è \033[94m'{question_word}'\033[0m?")
            user_input = input(f"\033[91m'{exit_test}'\033[0m –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç: ").strip().lower()

            if user_input == exit_test:
                print("\nüõë –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                flag = False
                break
            if user_input == expected_answer:
                correct_answers_session += 1
                is_correct = 1
                print("‚úÖ –í–µ—Ä–Ω–æ!\n")
            else:
                is_correct = 0
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: \033[93m'{expected_answer}'\033[0m.\n")
            # print("-" * 20)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            total_questions += 1
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            database.log_answer(word_id, timestamp,test_type ,is_correct ,PATH_TO_DB)
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct_answers_session} üìà\n"
          f"   –û—à–∏–±–æ–∫: {total_questions - correct_answers_session} ‚ùå\n")
    input("\033[90m<-press Enter->\033[0m")



def view_overall_status(PATH_TO_DB):
    rows = database.view_overall_stats(PATH_TO_DB)
    print("\n--- üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º ---")
    print(f"   {'–°–ª–æ–≤–æ':<15} | {'–ü–µ—Ä–µ–≤–æ–¥':<15} | –í—Å–µ–≥–æ | \033[92m‚úî\033[0m –í–µ—Ä–Ω–æ | ‚úò –ù–µ–≤–µ—Ä–Ω–æ | –¢–æ—á–Ω–æ—Å—Ç—å %")
    print("-" * 75)
    for index, row in enumerate(rows):
        eng, rus, total, correct, incorrect, accuracy = row
        accuracy_str = f"{accuracy}%" if accuracy is not None else "‚Äî"
        print(f"\033[31m{index +1}.\033[0m \033[94m{eng:<15}\033[0m | \033[93m{rus:<15}\033[0m | {total:^5} | \033[92m{correct:^7}\033[0m | {incorrect:^9} | {accuracy_str:^10}")
    input("\033[90m<-press Enter->\033[0m")

def get_problem_words(PATH_TO_DB):
    limit = 5           # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ (—Ç–æ–ø N).
    min_attempts = 1    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –≤—ã–±–æ—Ä–∫—É.
    # ANSI-–∫–æ–¥—ã # –û—Ç—Ç–µ–Ω–∫–∏ –æ—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ (—è—Ä–∫–∏–π) –¥–æ —Å–µ—Ä–æ–≥–æ (—Ç—É—Å–∫–ª—ã–π)
    gradient_colors = [196, 160, 131, 102, 245]
    reset = "\033[0m"
    try:
        problem_words = database.view_problem_words(limit, min_attempts, PATH_TO_DB)
        if not problem_words:
            print("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö, "
                  "–∏–ª–∏ –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
        else:
            print("\n--- üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞ TOP 5 ---")
            print(f"  {'–°–ª–æ–≤–æ':<13} |   {'–ü–µ—Ä–µ–≤–æ–¥':<13} | –í—Å–µ–≥–æ | ‚úî –í–µ—Ä–Ω–æ | ‚úò –ù–µ–≤–µ—Ä–Ω–æ | –¢–æ—á–Ω–æ—Å—Ç—å %")
            print("-" * 75)
            for index, word in enumerate(problem_words):
                en, ru, total, wrong, correct, acc = word
                if index >= len(gradient_colors) - 1: # –µ—Å–ª–∏ limit > 5 –¥–µ–ª–∞–µ–º –∑–∞—â–∏—Ç—É, —á—Ç–æ –±—ã –Ω–µ –≤—ã–ª–µ—Ç–µ—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Å—Å–∏–≤–∞ gradient_colors
                    index = len(gradient_colors) - 1
                color = f"\033[38;5;{gradient_colors[index]}m"
                print(f"{color}  {en:<13} |   {ru:<13} | {total:^5} | {correct:^7} | {wrong:^9} | {acc:^10}%{reset}")
        input("\033[90m<-press Enter->\033[0m")
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª–æ–≤: {e}")

def delete_word_db(english, PATH_TO_DB) -> None:
    count = database.delete_word(english, PATH_TO_DB)
    if count == 0:
        print(f"‚ùó –°–ª–æ–≤–æ \033[31m{english}\033[0m –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print(f"üóëÔ∏è –°–ª–æ–≤–æ \033[31m{english}\033[0m —É–¥–∞–ª–µ–Ω–æ!")


def main_menu(PATH_TO_DB):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    while True:
        print("\n--- üìò –ú–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤' ---")
        print(" 1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
        print(" 2. üóÇÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞")
        print(" 3. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
        print(" 4. ‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
        print(" 5. üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º")
        print(" 6. üêå –°–ª–æ–≤–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        print(" 7. üö™ –í—ã—Ö–æ–¥")
        print("-------------------------------------------------")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == '1':
            english = input("üì• –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: ").strip().lower()
            russian = input("üì• –í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥: ").strip().lower()
            database.add_word(english, russian, PATH_TO_DB)
        elif choice == '2':
            show_words(PATH_TO_DB)
        elif choice == '3':
            english = input("üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ").strip().lower()
            delete_word_db(english, PATH_TO_DB)
        elif choice == '4':
            start_test(PATH_TO_DB)
        elif choice == '5':
            view_overall_status(PATH_TO_DB)
        elif choice == '6':
            get_problem_words(PATH_TO_DB)
        elif choice == '7':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")


if __name__ == "__main__":
    database.init_db(PATH_TO_DB)
    main_menu(PATH_TO_DB)
